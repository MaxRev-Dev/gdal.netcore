#
#  gdal.netcore package automation
#
include RID.opt
include ../shared/GdalCore.opt

VCPKG=$(abspath $(VCPKG_ROOT))/vcpkg

# lowercase func
LW = $(shell echo '$*' | tr A-Z a-z)

# add support for [-force] param
REP = $(shell echo '$*' | sed "s/-force//g")

# target pretty output
TO = $(PRE) VCPKG |
SHELL=/bin/bash

all: install_vcpkg install_requirements
	@exit 0
force: $(addsuffix -force, $(TARGETS))
	@exit 0

# accepts any params to install/uninstall package
% :
ifneq ($(filter $(REP),$(VCPKG_REQUIRE_OSX)),'')
	@echo "'vcpkg make' > trying to make stuff for => $(REP)"
	@if [[ "$(LW)" == *"-force"* ]] ; then \
		$(MAKE) -f vcpkg-makefile upgrade; \
		$(VCPKG) remove $(REP):$(VCPKG_RID) --recurse  || exit 1; \
		$(VCPKG) install $(REP):$(VCPKG_RID) --recurse --clean-after-build || exit 1; \
	else \
		echo "To rebuild add {key}-force"; \
		$(VCPKG) list; \
	fi;
else
	@echo "Can not make $(REP)"
endif

pull:
	@if [ ! -d "$(VCPKG_ROOT)" ]; then \
		git clone $(VCPKG_REPO) $(VCPKG_ROOT); \
	fi;
	@cd $(VCPKG_ROOT) && git fetch origin 'refs/tags/*:refs/tags/*' --force
	@cd $(VCPKG_ROOT) && git reset --hard
	@cd $(VCPKG_ROOT) && git pull --force origin $(VCPKG_COMMIT_VER) || echo "Failed to pull changes"

bootstrap: checkout_ver
	cd $(VCPKG_ROOT) && ./bootstrap-vcpkg.sh || exit 1;

install_vcpkg: pull bootstrap
	@exit 0

install_requirements_only: patch_vcpkg_triplets install_packages
	@exit 0

install_requirements: install_vcpkg checkout_ver install_requirements_only
	@exit 0

checkout_ver:
	@echo "$(TO) Checking for remote changes..."
	@cd $(VCPKG_ROOT) && git fetch || exit 1
	@echo "$(TO) Restoring VCPKG sources version to $(VCPKG_COMMIT_VER)"
	@cd $(VCPKG_ROOT) && git checkout -q $(VCPKG_COMMIT_VER) --force || exit 1

upgrade: checkout_ver
	$(VCPKG) upgrade $(VCPKG_TRIPLETS_OVERLAY)
upgrade-force: checkout_ver
	$(VCPKG) upgrade --no-dry-run $(VCPKG_TRIPLETS_OVERLAY)
update: checkout_ver
	$(VCPKG) update $(VCPKG_TRIPLETS_OVERLAY)

$(VCPKG_CLEANUP):
	@if [ -d "$(VCPKG_ROOT)/$@/" ]; then \
		 rm -rf "$(VCPKG_ROOT)/$@"; \
	fi;

build_cleanup: $(VCPKG_CLEANUP)
	@exit 0
clean_ALL: build_cleanup
	@exit 0

define VCPKG_TRIPLET_OSX_DYNAMIC_RELEASE
	set(VCPKG_TARGET_ARCHITECTURE $(BUILD_ARCH))
	set(VCPKG_CRT_LINKAGE dynamic)
	set(VCPKG_LIBRARY_LINKAGE dynamic)
	set(VCPKG_BUILD_TYPE release)
	set(VCPKG_CMAKE_SYSTEM_NAME Darwin)
endef

define VCPKG_TRIPLET_OSX_STATIC_RELEASE
	set(VCPKG_TARGET_ARCHITECTURE $(BUILD_ARCH))
	set(VCPKG_CRT_LINKAGE static)
	set(VCPKG_LIBRARY_LINKAGE static)
	set(VCPKG_BUILD_TYPE release)
	set(VCPKG_CMAKE_SYSTEM_NAME Darwin)
endef

export VCPKG_TRIPLET_OSX_DYNAMIC_RELEASE
export VCPKG_TRIPLET_OSX_STATIC_RELEASE

patch_vcpkg_triplets:
	@(cd $(VCPKG_ROOT) && mkdir -p custom-triplets)
	@echo "$$VCPKG_TRIPLET_OSX_DYNAMIC_RELEASE" > $(VCPKG_ROOT)/custom-triplets/$(VCPKG_RID)-dynamic.cmake
	@echo "$$VCPKG_TRIPLET_OSX_STATIC_RELEASE" > $(VCPKG_ROOT)/custom-triplets/$(VCPKG_RID).cmake

install_packages:
	@$(foreach pack,$(VCPKG_REQUIRE_OSX),MAKELEVEL=0 $(VCPKG) install $(pack):$(VCPKG_RID) $(VCPKG_PARAMS_INSTALL);)
	@$(foreach pack,$(VCPKG_REQUIRE_OSX_DYNAMIC), MAKELEVEL=0 $(VCPKG) install $(pack):$(VCPKG_RID)-dynamic $(VCPKG_PARAMS_INSTALL);)

remove_packages:
	@$(foreach pack,$(VCPKG_REQUIRE_OSX), $(VCPKG) remove $(pack):$(VCPKG_RID) $(VCPKG_PARAMS_REMOVE);)
	@$(foreach pack,$(VCPKG_REQUIRE_OSX_DYNAMIC), $(VCPKG) remove $(pack):$(VCPKG_RID)-dynamic $(VCPKG_PARAMS_REMOVE);)
