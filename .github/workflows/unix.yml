name: Linux Build

on:
  workflow_call:
    inputs:
      is-pre-release:
        type: boolean
        required: true
      dotnet-version:
        type: string
        required: true
      is-version-branch:
        type: boolean
        required: true
      skip:
        type: boolean
        required: true

env:
  DOCKER_REGISTRY: ghcr.io/maxrev-dev

permissions:
  packages: write
  contents: read

jobs:
  BuildNugetPackages-Linux:
    if: ${{ ! inputs.skip }}
    strategy:
      matrix:
        include:
          - os: linux/amd64
            arch: x64
            actions-runner: ubuntu-latest
          - os: linux/arm64
            arch: arm64
            actions-runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.actions-runner }}
    defaults:
      run:
        working-directory: unix

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: NuGet - set credentials
        uses: ./.github/actions/set-credentials
        with:
          api-key-github: ${{ secrets.API_KEY_GITHUB }}
          api-key-nuget: ${{ secrets.API_KEY_NUGET }}
          api-user-github: ${{ secrets.API_USER_GITHUB }}
          api-user-nuget: ${{ secrets.API_USER_NUGET }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache restore
        uses: actions/cache@v4
        with:
          path: |
            .dotnet/
            ci/cache/
          key: ${{ matrix.os }}-buildx-${{ matrix.arch }}-${{ github.run_id }}
          restore-keys: |
            ${{ matrix.os }}-buildx-${{ matrix.arch }}-

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/gdal.netcore.builder.${{ matrix.arch }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            latest

      - name: Build and push on GH runner
        uses: docker/build-push-action@v5
        if: ${{ !contains(matrix.actions-runner, 'self-hosted') }}
        continue-on-error: true
        id: build-gh
        with:
          push: true
          context: .
          file: ci/Dockerfile.unix
          platforms: ${{ matrix.os }}
          build-args: |
            BUILD_NUMBER_TAIL=${{ github.run_number }}
            PRERELEASE=${{ inputs.is-pre-release }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push on local runner
        uses: docker/build-push-action@v5
        if: ${{ contains(matrix.actions-runner, 'self-hosted') }}
        continue-on-error: true
        id: build-local
        with:
          load: true
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/gdal.netcore.builder.${{ matrix.arch }}:latest
          context: .
          file: ci/Dockerfile.unix
          platforms: ${{ matrix.os }}
          build-args: |
            BUILD_NUMBER_TAIL=${{ github.run_number }}
            PRERELEASE=${{ inputs.is-pre-release }}
            DOTNET_INSTALL_DIR=/build/ci/cache/.dotnet
            VCPKG_DEFAULT_BINARY_CACHE=/build/ci/cache/vcpkg-archives/

      - name: Extract logs on build failure
        if: ${{ (steps.build-gh.outcome == 'failure') || (steps.build-local.outcome == 'failure') }}
        run: |
          echo "Build failed, attempting to extract logs using buildx output..."
          
          # Try to build again with output to extract logs directory
          docker buildx build \
            --platform=${{ matrix.os }} \
            --file=${{ github.workspace }}/ci/Dockerfile.unix \
            --target=logextract \
            --output=type=local,dest=./build-output \
            --build-arg BUILD_NUMBER_TAIL=${{ github.run_number }} \
            --build-arg PRERELEASE=${{ inputs.is-pre-release }} \
            --build-arg DOTNET_INSTALL_DIR=/build/ci/cache/.dotnet \
            --build-arg VCPKG_DEFAULT_BINARY_CACHE=/build/ci/cache/vcpkg-archives/ \
            ${{ github.workspace }} || echo "Unable to extract build output"
          
          # Look for vcpkg logs in the extracted output
          if [ -d "./build-output/logs/buildtrees" ]; then
            echo "Found vcpkg logs in build output"
            cp -r "./build-output/logs/buildtrees" ./vcpkg-logs/
          elif [ -d "./build-output/build/build-unix/vcpkg/buildtrees" ]; then
            echo "Found vcpkg logs in alternate location"
            cp -r "./build-output/build/build-unix/vcpkg/buildtrees" ./vcpkg-logs/
          else
            echo "No vcpkg buildtrees found in build output"
            # List what we actually got to help debug
            echo "Contents of build-output:"
            find ./build-output -type d -name "*vcpkg*" 2>/dev/null || echo "No vcpkg directories found"
            find ./build-output -type d -name "*buildtrees*" 2>/dev/null || echo "No buildtrees directories found"
            mkdir -p empty-logs
            echo "Build failed before vcpkg logs could be generated" > empty-logs/README.txt
            cp -r empty-logs ./vcpkg-logs/
          fi
          
          # Create tarball
          tar -czf vcpkg-buildtrees-${{ matrix.arch }}.tar.gz -C vcpkg-logs . || true

      - name: Fail job if build failed
        if: ${{ (steps.build-gh.outcome == 'failure') || (steps.build-local.outcome == 'failure') }}
        run: |
          echo "Docker build failed"
          exit 1

      - name: Upload vcpkg logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs-${{ matrix.arch }}
          path: vcpkg-buildtrees-${{ matrix.arch }}.tar.gz
          retention-days: 3

      - name: Extract artifacts
        run: |
          chmod +x '${{ github.workspace }}/ci/extract-container-artifacts.sh'
          '${{ github.workspace }}/ci/extract-container-artifacts.sh' ${{ matrix.arch }}

      - name: Store metadata as artifact
        uses: actions/upload-artifact@v4
        with:
          name: metadata-unix-${{ matrix.arch }}
          path: |
            shared/bundle/targets/
            package-build/*.csproj
          overwrite: true

      - name: GDAL formats unix
        uses: actions/upload-artifact@v4
        with:
          name: formats-unix-${{ matrix.arch }}
          path: |
            tests/gdal-formats/*.txt
          overwrite: true

      - name: Store packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages-unix-${{ matrix.arch }}
          path: nuget/*.nupkg
          overwrite: true

  TestPackages-Linux:
    needs: BuildNugetPackages-Linux
    strategy:
      matrix:
        include:
          - os: linux/amd64
            arch: x64
            actions-runner: ubuntu-latest
          - os: linux/arm64
            arch: arm64
            actions-runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.actions-runner }}
    defaults:
      run:
        working-directory: unix

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: packages-unix-${{ matrix.arch }}
          path: nuget/
      - name: Remove old formats
        run: |
          rm -rf ${{ github.workspace }}/tests/gdal-formats

      - uses: actions/download-artifact@v4
        name: Download artifact - formats
        with:
          name: formats-unix-${{ matrix.arch }}
          path: "tests/gdal-formats"
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build docker image
        run: |
          docker buildx build --load --platform=${{ matrix.os }} \
            --progress=plain -t maxrev-dev/gdal.netcore.tester.${{ matrix.arch }}:latest \
            --build-arg BUILD_NUMBER_TAIL=${{ github.run_number }} \
            --build-arg BUILD_ARCH=${{ matrix.arch }} \
            --build-arg PRERELEASE=${{ inputs.is-pre-release }} \
            -f '${{ github.workspace }}/ci/Dockerfile.unix.test' \
            ${{ github.workspace }}

      - name: Test packages
        run: |
          docker run --rm \
            --env BUILD_NUMBER_TAIL=${{ github.run_number }} \
            --env BUILD_ARCH=${{ matrix.arch }} \
            --env PRERELEASE=${{ inputs.is-pre-release }} \
            -t maxrev-dev/gdal.netcore.tester.${{ matrix.arch }}:latest

  PushPackages-Linux:
    needs: TestPackages-Linux
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: unix

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Download artifact - packages
        uses: actions/download-artifact@v4
        with:
          pattern: packages-unix*
          merge-multiple: true
          path: "${{ github.workspace}}/nuget/"

      - name: Download artifact - metadata
        uses: actions/download-artifact@v4
        with:
          pattern: metadata-unix*
          merge-multiple: true

      - name: NuGet - set credentials
        uses: ./.github/actions/set-credentials
        with:
          api-key-github: ${{ secrets.API_KEY_GITHUB }}
          api-key-nuget: ${{ secrets.API_KEY_NUGET }}
          api-user-github: ${{ secrets.API_USER_GITHUB }}
          api-user-nuget: ${{ secrets.API_USER_NUGET }}

      - name: Build bundle
        run: |
          make -f publish-makefile pack-bundle-only CAT_NAME=unix PRERELEASE=${{ inputs.is-pre-release }} BUILD_NUMBER_TAIL=${{ github.run_number }}

      - name: Store packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages-unix-final
          path: nuget/*.nupkg
          overwrite: true

      - name: Push packages
        if: ${{  github.event.pull_request.merged == true || github.ref == 'refs/heads/main' || fromJson(inputs.is-version-branch) }}
        run: |
          make -f push-packages-makefile PRERELEASE=${{ inputs.is-pre-release }} INCLUDE_CORE=1 \
            BUILD_NUMBER_TAIL=${{ github.run_number }} API_KEY_GITHUB=${{ secrets.API_KEY_GITHUB }} API_KEY_NUGET=${{ secrets.API_KEY_NUGET }}
