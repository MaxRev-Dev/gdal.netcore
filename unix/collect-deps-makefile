include RID.opt
include ../shared/GdalCore.opt
 
ifeq ($(RID),)
RID=linux-x64
endif

BUILD_BASE_LIB=$(GDAL_BUILD)/lib
SHELL=/bin/bash

# output helper
define \n


endef

all: build

OUTPUT = $(ROOTDIR_)/runtimes/$(RID)/native
BUILD_BASE = $(BASE)/bindings

build: linkall
	@echo "Bindings and drivers are ready to packaging!"

linkall: initdirs copy-deps copy-projdb
	$(eval _so_out_:=$(wildcard  $(OUTPUT)/*.so*))
	@$(foreach lib, $(_so_out_),  @if [ -a $(lib) ]; then echo "Patching $(lib)" & patchelf --set-rpath '$$ORIGIN' $(lib); fi;${\n})
	@echo "Libraries patched successfully"

clean:
	(cd $(BUILD_BASE) && rm -f ${CSHARP_MODULES} *.$(OBJ_EXT) *.config *.dll *.mdb *.exe)
	(cd $(PWD) && rm -f ${CSHARP_MODULES} *.$(OBJ_EXT) *.config *.dll *.mdb *.exe)
	
cleanpackages:
	@if [ -d "$(NUGET_)" ]; then rm -rf "$(NUGET_)"; fi; 

initdirs:
	rm -rvf $(OUTPUT)/*.*
	mkdir -p $(OUTPUT)

copy-deps: 
#	copy gdal library
	cp -rfL $(GDAL_BUILD)/lib/libgdal.so.?? $(OUTPUT)/
#	copy dynamic wrappers
	cp -rfL $(BUILD_ROOT)/gdal-cmake-temp/swig/csharp/*.so $(OUTPUT)/
#   including all deps installed in this repo
#   and some external dependencies
#   1. copy gdal.so.XX
#	2. get deps inlcuding PROJ and LD_LIBRARY_PATH
#   3. copy to output
	ls $(OUTPUT)/ | grep -P 'libgdal.so.(?:\d+)' | \
			LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(PROJ_BUILD)/lib xargs -I {} \
			ldd $(OUTPUT)/{} | grep -E "proj|/lib/|$(ROOTDIR_)/build-unix" | awk '{print $$3}' | xargs -I {} cp -vv {} $(OUTPUT)  

copy-projdb:
	-mkdir -p $(LIBSHARED)
	cp -rf $(PROJ_BUILD)/share/proj/proj.db $(LIBSHARED)


.EXPORT_ALL_VARIABLES:
PKG_CONFIG_PATH=$(VCPKG_INSTALLED)/lib/pkgconfig:$(VCPKG_INSTALLED_DYNAMIC)/lib/pkgconfig
LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:${VCPKG_INSTALLED_DYNAMIC}/lib
